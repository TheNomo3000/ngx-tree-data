import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { PlatformLocation } from '@angular/common';
import { ItemNode } from '../models/models';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
let NgxTreeDataService = class NgxTreeDataService {
    constructor(platformLocation) {
        this.platformLocation = platformLocation;
        this.dataChange = new BehaviorSubject(null);
        this.dataSource = [];
    }
    get data() { return this.dataChange.value; }
    initialize(data) {
        this.externalData = data;
        const newData = this.generateData(this.externalData);
        this.dataChange.next(newData);
    }
    generateData(data) {
        this.dataSource = this.generateDataWithCode(data);
        this.treeData = this.dataSource;
        return this.buildFileTree(this.dataSource, '0');
    }
    generateDataWithCode(data) {
        const newData = [];
        let parent = 1;
        data.forEach(item => {
            newData.push({
                text: item.text,
                id: item.id,
                code: `0.${parent}`,
                selected: item.selected,
                data: item.data
            });
            const childrens = item.children;
            if (childrens.length > 0) {
                let children = 1;
                childrens.forEach(el => {
                    const itemChildren = {
                        text: el.text,
                        code: `0.${parent}.${children}`,
                        selected: el.selected,
                        id: el.id,
                        data: el.data
                    };
                    newData.push(itemChildren);
                    children++;
                });
            }
            parent++;
        });
        return newData;
    }
    buildFileTree(obj, level) {
        return obj.filter(o => o.code.startsWith(level + '.')
            && (o.code.match(/\./g) || []).length === (level.match(/\./g) || []).length + 1)
            .map(o => {
            const node = new ItemNode();
            node.item = o.text;
            node.selected = o.selected;
            node.id = o.id;
            node.code = o.code;
            node.data = o.data;
            const children = obj.filter(so => so.code.startsWith(level + '.'));
            if (children && children.length > 0) {
                node.children = this.buildFileTree(children, o.code);
            }
            return node;
        });
    }
    filter(filterText) {
        this.treeData = this.generateDataWithCode(this.externalData);
        let filteredTreeData;
        if (filterText) {
            filteredTreeData = this.treeData.filter(d => d.text.toLocaleLowerCase().indexOf(filterText.toLocaleLowerCase()) > -1);
            Object.assign([], filteredTreeData).forEach(ftd => {
                let str = ftd.code;
                while (str.lastIndexOf('.') > -1) {
                    const index = str.lastIndexOf('.');
                    str = str.substring(0, index);
                    if (filteredTreeData.findIndex(t => t.code === str) === -1) {
                        const obj = this.treeData.find(d => d.code === str);
                        if (obj) {
                            filteredTreeData.push(obj);
                        }
                    }
                }
            });
        }
        else {
            filteredTreeData = this.treeData;
        }
        const data = this.buildFileTree(filteredTreeData, '0');
        this.dataChange.next(data);
    }
    updateData(items, externalData) {
        this.externalData = this.recursiveUpdate(items, this.externalData);
    }
    recursiveUpdate(items, externalData) {
        externalData.map(data => {
            data.selected = false;
            items.forEach(el => {
                if (el.id === data.id) {
                    data.selected = true;
                }
            });
            const children = data.children;
            if (children && data.children.length > 0) {
                this.recursiveUpdate(items, children);
            }
        });
        return externalData;
    }
};
NgxTreeDataService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgxTreeDataService_Factory() { return new NgxTreeDataService(i0.ɵɵinject(i1.PlatformLocation)); }, token: NgxTreeDataService, providedIn: "root" });
NgxTreeDataService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__metadata("design:paramtypes", [PlatformLocation])
], NgxTreeDataService);
export { NgxTreeDataService };
//# sourceMappingURL=data:application/json;base64,
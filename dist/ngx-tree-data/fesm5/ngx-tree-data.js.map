{"version":3,"file":"ngx-tree-data.js","sources":["ng://ngx-tree-data/lib/models/models.ts","ng://ngx-tree-data/lib/services/ngx-tree-data.service.ts","ng://ngx-tree-data/lib/ngx-tree-data.component.ts","ng://ngx-tree-data/lib/ngx-tree-data.module.ts"],"sourcesContent":["export class ItemNode {\r\n    children: ItemNode[];\r\n    id ?= -1;\r\n    item: string;\r\n    code: string;\r\n    selected: boolean;\r\n    data: any;\r\n}\r\n\r\nexport class ItemFlatNode {\r\n    id ?= -1;\r\n    item: string;\r\n    level: number;\r\n    expandable: boolean;\r\n    selected: boolean;\r\n    code: string;\r\n    data: any;\r\n}\r\n\r\nexport class TreeData {\r\n    text: string;\r\n    id ?= -1;\r\n    selected = false;\r\n    children: TreeData [] | null;\r\n    data ?: any = null;\r\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { PlatformLocation } from '@angular/common';\nimport { ItemNode, TreeData, ItemFlatNode } from '../models/models';\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxTreeDataService {\n  dataChange = new BehaviorSubject<ItemNode []>(null);\n  treeData: any [];\n  externalData: TreeData [];\n  dataSource = [];\n  get data(): ItemNode [] { return  this.dataChange.value; }\n  loaderId: string;\n  constructor(private platformLocation: PlatformLocation) {}\n\n  initialize(data: TreeData []) {\n    this.externalData = data;\n    const newData = this.generateData(this.externalData);\n    this.dataChange.next(newData);\n  }\n\n  generateData(data: TreeData []): ItemNode [] {\n    this.dataSource = this.generateDataWithCode(data);\n    this.treeData = this.dataSource;\n    return this.buildFileTree(this.dataSource, '0');\n  }\n\n  private generateDataWithCode(data: TreeData []): any[] {\n    const newData = [];\n    let parent = 1;\n    data.forEach(item => {\n      newData.push(\n        {\n          text: item.text,\n          id: item.id,\n          code: `0.${parent}`,\n          selected: item.selected,\n          data: item.data\n        }\n      );\n      const childrens = item.children;\n      if (childrens.length > 0) {\n        let children = 1;\n        childrens.forEach(el => {\n          const itemChildren = {\n            text: el.text,\n            code: `0.${parent}.${children}`,\n            selected: el.selected,\n            id: el.id,\n            data: el.data\n          };\n          newData.push(itemChildren);\n          children++;\n        });\n      }\n      parent++;\n    });\n    return newData;\n  }\n\n  private buildFileTree(obj: any[], level: string): ItemNode [] {\n    return obj.filter(o =>\n      (o.code as string).startsWith(level + '.')\n      && (o.code.match(/\\./g) || []).length === (level.match(/\\./g) || []).length + 1\n    )\n      .map(o => {\n        const node = new ItemNode();\n        node.item = o.text;\n        node.selected = o.selected;\n        node.id = o.id;\n        node.code = o.code;\n        node.data = o.data;\n        const children = obj.filter(so => (so.code as string).startsWith(level + '.'));\n        if (children && children.length > 0) {\n            node.children = this.buildFileTree(children, o.code);\n          }\n        return node;\n      });\n  }\n\n  public filter(filterText: string) {\n    this.treeData = this.generateDataWithCode(this.externalData);\n    let filteredTreeData;\n    if (filterText) {\n      filteredTreeData = this.treeData.filter(d => d.text.toLocaleLowerCase().indexOf(filterText.toLocaleLowerCase()) > -1);\n      Object.assign([], filteredTreeData).forEach(ftd => {\n        let str = (ftd.code as string);\n        while (str.lastIndexOf('.') > -1) {\n          const index = str.lastIndexOf('.');\n          str = str.substring(0, index);\n          if (filteredTreeData.findIndex(t => t.code === str) === -1) {\n            const obj = this.treeData.find(d => d.code === str);\n            if (obj) {\n              filteredTreeData.push(obj);\n            }\n          }\n        }\n      });\n    } else {\n      filteredTreeData = this.treeData;\n    }\n    const data = this.buildFileTree(filteredTreeData, '0');\n    this.dataChange.next(data);\n  }\n\n  public updateData(items: ItemFlatNode [], externalData ?: TreeData [] | null): void {\n    this.externalData = this.recursiveUpdate(items, this.externalData);\n  }\n\n  recursiveUpdate(items: ItemFlatNode[], externalData: TreeData []): TreeData [] {\n    externalData.map(data => {\n      data.selected = false;\n      items.forEach(el => {\n        if (el.id === data.id) {\n          data.selected = true;\n        }\n      });\n      const children = data.children;\n      if (children && data.children.length > 0) {\n        this.recursiveUpdate(items, children);\n      }\n    });\n    return externalData;\n  }\n}\n","import { Component, Output, Input, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { ItemNode, ItemFlatNode } from './models/models';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatTreeFlattener, MatTreeFlatDataSource } from '@angular/material/tree';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgxTreeDataService } from './services/ngx-tree-data.service';\n\n@Component({\n  selector: 'ngx-tree-data',\n  templateUrl: `ngx-tree-data.component.html`,\n  styleUrls: [`ngx-tree-data.component.scss`]\n})\nexport class NgxTreeDataComponent implements OnDestroy, OnInit {\n  @Output() selected = new EventEmitter<ItemNode | ItemFlatNode []>();\n  @Input() autoSave = true;\n  @Input() selectFirst = false;\n  @Input() selectThis: number = null;\n  @Input() checkbox = false;\n  @Input() search = false;\n  @Input() selectAll = false;\n  @Input() multiple = true;\n  flatNodeMap = new Map<ItemFlatNode, ItemNode>();\n  nestedNodeMap = new Map<ItemNode, ItemFlatNode>();\n\n  selectedParent: ItemFlatNode | null = null;\n\n  newItemName = '';\n\n  treeControl: FlatTreeControl<ItemFlatNode>;\n\n  treeFlattener: MatTreeFlattener<ItemNode, ItemFlatNode>;\n\n  dataSource: MatTreeFlatDataSource<ItemNode, ItemFlatNode>;\n\n  checklistSelection = new SelectionModel<ItemFlatNode>(this.multiple);\n  loaderId: string;\n  constructor(private database: NgxTreeDataService) {\n    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,\n      this.isExpandable, this.getChildren);\n    this.treeControl = new FlatTreeControl<ItemFlatNode>(this.getLevel, this.isExpandable);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n  }\n\n  ngOnInit() {\n    this.database.dataChange.subscribe( data => {\n      if (this.selectFirst) {\n        data.forEach( el => {\n          if (el.children) {\n            el.children.forEach( item => {\n              this.selected.emit(item);\n            });\n          }\n        });\n      } else if (this.selectThis) {\n        data.filter( (o: ItemNode) => (o.id as number) === (this.selectThis as number) )\n          .map( (item: ItemNode ) => {\n            this.selected.emit(item);\n          });\n      }\n      this.dataSource.data = data;\n    });\n  }\n\n  getLevel = (node: ItemFlatNode) => node.level;\n\n  isExpandable = (node: ItemFlatNode) => node.expandable;\n\n  getChildren = (node: ItemNode): ItemNode [] => node.children;\n\n  hasChild = (_: number, _nodeData: ItemFlatNode) => _nodeData.expandable;\n\n  transformer = (node: ItemNode, level: number) => {\n    const existingNode = this.nestedNodeMap.get(node);\n    let flatNode;\n    flatNode = existingNode && existingNode.item === node.item ? existingNode : new ItemNode();\n    flatNode.item = node.item;\n    flatNode.level = level;\n    flatNode.code = node.code;\n    flatNode.data = node.data;\n    flatNode.selected = node.selected;\n    flatNode.id = node.id;\n    if (flatNode.selected) {\n      this.checklistSelection.select(flatNode);\n    }\n    flatNode.expandable = node.children && node.children.length > 0;\n    this.flatNodeMap.set(flatNode, node);\n    this.nestedNodeMap.set(node, flatNode);\n    return flatNode;\n  }\n\n  descendantsAllSelected(node: ItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    return descendants.every(child => this.checklistSelection.isSelected(child));\n  }\n\n  descendantsPartiallySelected(node: ItemFlatNode): boolean {\n    const descendants = this.treeControl.getDescendants(node);\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\n    return result && !this.descendantsAllSelected(node);\n  }\n\n  todoItemSelectionToggle(node: ItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    const descendants = this.treeControl.getDescendants(node);\n    this.checklistSelection.isSelected(node)\n      ? this.checklistSelection.select(...descendants)\n      : this.checklistSelection.deselect(...descendants);\n  }\n\n  filterChanged(filterText: string) {\n    this.database.filter(filterText);\n    if (filterText) {\n      this.treeControl.expandAll();\n    } else {\n      this.treeControl.collapseAll();\n    }\n  }\n\n  changeStatusNode(node: ItemFlatNode): void {\n    this.checklistSelection.toggle(node);\n    this.database.updateData(this.checklistSelection.selected);\n    this.selected.emit(this.checklistSelection.selected);\n  }\n\n  selectAllOptions(mode: boolean): void {\n    if (mode) {\n      this.checklistSelection.select(...this.treeControl.dataNodes);\n    } else {\n      this.checklistSelection.deselect(...this.treeControl.dataNodes);\n    }\n    this.selected.emit(this.checklistSelection.selected);\n    this.database.updateData(this.checklistSelection.selected);\n  }\n\n  ngOnDestroy(): void {\n    this.dataSource.data = [];\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { NgxTreeDataComponent } from './ngx-tree-data.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\n\n@NgModule({\n  declarations: [\n    NgxTreeDataComponent\n  ],\n  imports: [\n    BrowserModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatFormFieldModule,\n    MatTreeModule,\n    MatIconModule,\n    MatInputModule\n  ],\n  exports: [\n    NgxTreeDataComponent\n  ],\n})\nexport class NgxTreeDataModule { }\n"],"names":["tslib_1.__decorate"],"mappings":"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"}
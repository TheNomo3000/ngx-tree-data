!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("rxjs"),require("@angular/common"),require("@angular/cdk/tree"),require("@angular/material/tree"),require("@angular/cdk/collections"),require("@angular/platform-browser"),require("@angular/material/button"),require("@angular/material/checkbox"),require("@angular/material/form-field"),require("@angular/material/icon"),require("@angular/material/input")):"function"==typeof define&&define.amd?define("ngx-tree-data",["exports","@angular/core","rxjs","@angular/common","@angular/cdk/tree","@angular/material/tree","@angular/cdk/collections","@angular/platform-browser","@angular/material/button","@angular/material/checkbox","@angular/material/form-field","@angular/material/icon","@angular/material/input"],t):t((e=e||self)["ngx-tree-data"]={},e.ng.core,e.rxjs,e.ng.common,e.ng.cdk.tree,e.ng.material.tree,e.ng.cdk.collections,e.ng.platformBrowser,e.ng.material.button,e.ng.material.checkbox,e.ng.material["form-field"],e.ng.material.icon,e.ng.material.input)}(this,function(e,t,n,r,a,i,o,l,c,s,d,u,h){"use strict";function f(e,t,n,r){var a,i=arguments.length,o=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(a=e[l])&&(o=(i<3?a(o):i>3?a(t,n,o):a(t,n))||o);return i>3&&o&&Object.defineProperty(t,n,o),o}function p(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function g(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,i=n.call(e),o=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o}function m(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(g(arguments[t]));return e}var b=function(){this.id=-1},v=function(){function e(e){this.platformLocation=e,this.dataChange=new n.BehaviorSubject(null),this.dataSource=[]}return Object.defineProperty(e.prototype,"data",{get:function(){return this.dataChange.value},enumerable:!0,configurable:!0}),e.prototype.initialize=function(e){this.externalData=e;var t=this.generateData(this.externalData);this.dataChange.next(t)},e.prototype.generateData=function(e){return this.dataSource=this.generateDataWithCode(e),this.treeData=this.dataSource,this.buildFileTree(this.dataSource,"0")},e.prototype.generateDataWithCode=function(e){var t=[],n=1;return e.forEach(function(e){t.push({text:e.text,id:e.id,code:"0."+n,selected:e.selected,data:e.data});var r=e.children;if(r.length>0){var a=1;r.forEach(function(e){var r={text:e.text,code:"0."+n+"."+a,selected:e.selected,id:e.id,data:e.data};t.push(r),a++})}n++}),t},e.prototype.buildFileTree=function(e,t){var n=this;return e.filter(function(e){return e.code.startsWith(t+".")&&(e.code.match(/\./g)||[]).length===(t.match(/\./g)||[]).length+1}).map(function(r){var a=new b;a.item=r.text,a.selected=r.selected,a.id=r.id,a.code=r.code,a.data=r.data;var i=e.filter(function(e){return e.code.startsWith(t+".")});return i&&i.length>0&&(a.children=n.buildFileTree(i,r.code)),a})},e.prototype.filter=function(e){var t,n=this;this.treeData=this.generateDataWithCode(this.externalData),e?(t=this.treeData.filter(function(t){return t.text.toLocaleLowerCase().indexOf(e.toLocaleLowerCase())>-1}),Object.assign([],t).forEach(function(e){for(var r=e.code;r.lastIndexOf(".")>-1;){var a=r.lastIndexOf(".");if(r=r.substring(0,a),-1===t.findIndex(function(e){return e.code===r})){var i=n.treeData.find(function(e){return e.code===r});i&&t.push(i)}}})):t=this.treeData;var r=this.buildFileTree(t,"0");this.dataChange.next(r)},e.prototype.updateData=function(e,t){this.externalData=this.recursiveUpdate(e,this.externalData)},e.prototype.recursiveUpdate=function(e,t){var n=this;return t.map(function(t){t.selected=!1,e.forEach(function(e){e.id===t.id&&(t.selected=!0)});var r=t.children;r&&t.children.length>0&&n.recursiveUpdate(e,r)}),t},e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e(t.ɵɵinject(r.PlatformLocation))},token:e,providedIn:"root"}),e=f([t.Injectable({providedIn:"root"}),p("design:paramtypes",[r.PlatformLocation])],e)}(),x=function(){function e(e){var n=this;this.database=e,this.selected=new t.EventEmitter,this.autoSave=!0,this.selectFirst=!1,this.selectThis=null,this.checkbox=!1,this.search=!1,this.selectAll=!1,this.multiple=!0,this.flatNodeMap=new Map,this.nestedNodeMap=new Map,this.selectedParent=null,this.newItemName="",this.checklistSelection=new o.SelectionModel(this.multiple),this.getLevel=function(e){return e.level},this.isExpandable=function(e){return e.expandable},this.getChildren=function(e){return e.children},this.hasChild=function(e,t){return t.expandable},this.transformer=function(e,t){var r,a=n.nestedNodeMap.get(e);return(r=a&&a.item===e.item?a:new b).item=e.item,r.level=t,r.code=e.code,r.data=e.data,r.selected=e.selected,r.id=e.id,r.selected&&n.checklistSelection.select(r),r.expandable=e.children&&e.children.length>0,n.flatNodeMap.set(r,e),n.nestedNodeMap.set(e,r),r},this.treeFlattener=new i.MatTreeFlattener(this.transformer,this.getLevel,this.isExpandable,this.getChildren),this.treeControl=new a.FlatTreeControl(this.getLevel,this.isExpandable),this.dataSource=new i.MatTreeFlatDataSource(this.treeControl,this.treeFlattener)}return e.prototype.ngOnInit=function(){var e=this;this.database.dataChange.subscribe(function(t){e.selectFirst?t.forEach(function(t){t.children&&t.children.forEach(function(t){e.selected.emit(t)})}):e.selectThis&&t.filter(function(t){return t.id===e.selectThis}).map(function(t){e.selected.emit(t)}),e.dataSource.data=t})},e.prototype.descendantsAllSelected=function(e){var t=this;return this.treeControl.getDescendants(e).every(function(e){return t.checklistSelection.isSelected(e)})},e.prototype.descendantsPartiallySelected=function(e){var t=this;return this.treeControl.getDescendants(e).some(function(e){return t.checklistSelection.isSelected(e)})&&!this.descendantsAllSelected(e)},e.prototype.todoItemSelectionToggle=function(e){var t,n;this.checklistSelection.toggle(e);var r=this.treeControl.getDescendants(e);this.checklistSelection.isSelected(e)?(t=this.checklistSelection).select.apply(t,m(r)):(n=this.checklistSelection).deselect.apply(n,m(r))},e.prototype.filterChanged=function(e){this.database.filter(e),e?this.treeControl.expandAll():this.treeControl.collapseAll()},e.prototype.changeStatusNode=function(e){this.checklistSelection.toggle(e),this.database.updateData(this.checklistSelection.selected),this.selected.emit(this.checklistSelection.selected)},e.prototype.selectAllOptions=function(e){var t,n;e?(t=this.checklistSelection).select.apply(t,m(this.treeControl.dataNodes)):(n=this.checklistSelection).deselect.apply(n,m(this.treeControl.dataNodes)),this.selected.emit(this.checklistSelection.selected),this.database.updateData(this.checklistSelection.selected)},e.prototype.ngOnDestroy=function(){this.dataSource.data=[]},f([t.Output(),p("design:type",Object)],e.prototype,"selected",void 0),f([t.Input(),p("design:type",Object)],e.prototype,"autoSave",void 0),f([t.Input(),p("design:type",Object)],e.prototype,"selectFirst",void 0),f([t.Input(),p("design:type",Number)],e.prototype,"selectThis",void 0),f([t.Input(),p("design:type",Object)],e.prototype,"checkbox",void 0),f([t.Input(),p("design:type",Object)],e.prototype,"search",void 0),f([t.Input(),p("design:type",Object)],e.prototype,"selectAll",void 0),f([t.Input(),p("design:type",Object)],e.prototype,"multiple",void 0),e=f([t.Component({selector:"ngx-tree-data",template:'<div class="flex">\r\n    <div class="box-flex align-self-center">\r\n      <ng-content select=".title"></ng-content>\r\n    </div>\r\n    <div *ngIf="search" class="box-flex float-right">\r\n      <mat-form-field>\r\n        <input matInput placeholder="Search" (input)="filterChanged($event.target.value)" autocomplete="off">\r\n      </mat-form-field>\r\n    </div>\r\n  </div>\r\n  <div class="flex" *ngIf="selectAll">\r\n    <div class="box-flex">\r\n      <button mat-stroked-button (click)="selectAllOptions(true)">Select All</button>\r\n    </div>\r\n    <div class="box-flex">\r\n      <button mat-stroked-button (click)="selectAllOptions(false)">Deselect All</button>\r\n    </div>\r\n  </div>\r\n  <mat-tree [dataSource]="dataSource" [treeControl]="treeControl">\r\n    <mat-tree-node *matTreeNodeDef="let node" matTreeNodePadding [style.padding]="checkbox ? \'0px\': \'40px\'">\r\n      <button mat-button (click)="selected.emit(node)" [disabled]="node.id == -1 ? true : false">\r\n        <span *ngIf="!checkbox">{{node.item}}</span>\r\n      </button>\r\n      <mat-checkbox *ngIf="checkbox"\r\n        [checked]="checklistSelection.isSelected(node)"\r\n        (change)="changeStatusNode(node)">{{node.item}}</mat-checkbox>\r\n    </mat-tree-node>\r\n    <mat-tree-node *matTreeNodeDef="let node;when: hasChild" matTreeNodePadding>\r\n      <button mat-icon-button matTreeNodeToggle\r\n              [attr.aria-label]="\'toggle \' + node.name">\r\n        <mat-icon> {{treeControl.isExpanded(node) ? \'expand_more\' : \'chevron_right\'}} </mat-icon>\r\n      </button>\r\n      <mat-checkbox *ngIf="checkbox" \r\n        [checked]="checklistSelection.isSelected(node)"\r\n        (change)="changeStatusNode(node)">{{node.item}}</mat-checkbox>\r\n      <span *ngIf="!checkbox">{{node.item}}</span>\r\n    </mat-tree-node>\r\n  </mat-tree>',styles:[":host .flex{display:flex;justify-content:space-between}:host form{width:100%}:host form mat-form-field{width:100%}"]}),p("design:paramtypes",[v])],e)}(),y=function(){function e(){}return e=f([t.NgModule({declarations:[x],imports:[l.BrowserModule,c.MatButtonModule,s.MatCheckboxModule,d.MatFormFieldModule,i.MatTreeModule,u.MatIconModule,h.MatInputModule],exports:[x]})],e)}();e.NgxTreeDataComponent=x,e.NgxTreeDataModule=y,e.NgxTreeDataService=v,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-tree-data.umd.min.js.map
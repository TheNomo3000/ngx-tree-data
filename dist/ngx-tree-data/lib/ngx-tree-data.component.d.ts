import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { ItemNode, ItemFlatNode } from './models/models';
import { FlatTreeControl } from '@angular/cdk/tree';
import { MatTreeFlattener, MatTreeFlatDataSource } from '@angular/material/tree';
import { SelectionModel } from '@angular/cdk/collections';
import { NgxTreeDataService } from './services/ngx-tree-data.service';
export declare class NgxTreeDataComponent implements OnDestroy, OnInit {
    private database;
    selected: EventEmitter<ItemNode | ItemFlatNode[]>;
    autoSave: boolean;
    selectFirst: boolean;
    selectThis: number;
    checkbox: boolean;
    search: boolean;
    selectAll: boolean;
    multiple: boolean;
    flatNodeMap: Map<ItemFlatNode, ItemNode>;
    nestedNodeMap: Map<ItemNode, ItemFlatNode>;
    selectedParent: ItemFlatNode | null;
    newItemName: string;
    treeControl: FlatTreeControl<ItemFlatNode>;
    treeFlattener: MatTreeFlattener<ItemNode, ItemFlatNode>;
    dataSource: MatTreeFlatDataSource<ItemNode, ItemFlatNode>;
    checklistSelection: SelectionModel<ItemFlatNode>;
    loaderId: string;
    constructor(database: NgxTreeDataService);
    ngOnInit(): void;
    getLevel: (node: ItemFlatNode) => number;
    isExpandable: (node: ItemFlatNode) => boolean;
    getChildren: (node: ItemNode) => ItemNode[];
    hasChild: (_: number, _nodeData: ItemFlatNode) => boolean;
    transformer: (node: ItemNode, level: number) => any;
    descendantsAllSelected(node: ItemFlatNode): boolean;
    descendantsPartiallySelected(node: ItemFlatNode): boolean;
    todoItemSelectionToggle(node: ItemFlatNode): void;
    filterChanged(filterText: string): void;
    changeStatusNode(node: ItemFlatNode): void;
    selectAllOptions(mode: boolean): void;
    ngOnDestroy(): void;
}
